kind: Deployment
apiVersion: apps/v1
metadata:
  name: user3-hello-world
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user3-hello-world
  template:
    metadata:
      labels:
        app: user3-hello-world
    spec:
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: hello-world
          ports:
            - containerPort: 8080
              protocol: TCP
          imagePullPolicy: IfNotPresent
          image: 'quay.io/talhodor128/image:v2'
          volumeMounts:
          - name: index-html
            mountPath: /tmp/html
          readinessProbe:
            httpGet:
              path: /health/readiness # this check the application url path
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP            initialDelaySeconds: 1
            timeoutSeconds: 1 # the time for timeout
            periodSeconds: 10 # the abount of time to wait between checks
            successThreshold: 1 # count to decalre seccessfull 
            failureThreshold: 3 # count to decalre failure
          livenessProbe:
            httpGet:
              path: /health/readiness # this check the application url path
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP            initialDelaySeconds: 1
            timeoutSeconds: 1 # the time for timeout
            periodSeconds: 10 # the abount of time to wait between checks
            successThreshold: 1 # count to decalre seccessfull 
            failureThreshold: 3 # count to decalre failure
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10